#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import subprocess
import sys

def show_help() -> None:
    '''
    Print help info and quit.
    '''
    print('')
    print('IMAGE PROCESSER')
    print('==============')
    print('This script processes images by renaming and moving them. It uses two other scripts,')
    print('\'image_dater.py\' and \'image_mover.py\', to rename and move the images, respectively.')
    print('Example:')
    print('--------')
    print('Open WSL and navigate to the folder containing this script:')
    print('    $ cd /mnt/c/Users/krist/Documents/image_dater')
    print('')
    print('Launch this script with the directory containing the images to process. Tip: use the')
    print('yes command to automatically confirm:')
    print('    $ yes | python image_processer.py -d "/mnt/c/Backup/Pictures_2024/unordered"')
    print('')
    print('')
    print('IMAGE DATER')
    print('===========')
    print('This script renames images based on their date. It parses the exif data of each image')
    print('file to extract the date the photo was taken. The date is then used to rename the image')
    print('file. The renaming is done in the same directory as the original file. The new filename')
    print('consists of the date and a counter to ensure uniqueness.')
    print('')
    print('Usage:')
    print('------')
    print('    python image_dater.py -h')
    print('    python image_dater.py -d <directory> [-v] [-n]')
    print('    python image_dater.py -f <file> [-v]')
    print('')
    print('Options:')
    print('--------')
    print('    -h, --help                  Show this help message and exit.')
    print('')
    print('    -d, --directory <directory> Rename all images in the given directory and its sub-')
    print('                                directories according to their dates.')
    print('')
    print('    -f, --file <file>           Show the date the photo was taken for the given file (no')
    print('                                renaming).')
    print('')
    print('    -v, --verbose               Print more information.')
    print('')
    print('    -n, --dry-run               Do not rename files. Only show what would be done.')
    print('')
    print('Notes:')
    print('------')
    print('The script uses the exiftool command-line tool to extract the exif data from the image')
    print('files. Unfortunately this tool is not available on Windows. You can use the Windows')
    print('Subsystem for Linux (WSL) to run the script.')
    print('')
    print('IMAGE MOVER')
    print('===========')
    print('This script moves images based on their date. It expects that the images have already been')
    print('renamed by the "image_dater.py" script. The images are moved into folders structured by')
    print('year and month based on the date in the filename.')
    print('')
    print('Usage:')
    print('------')
    print('    python image_mover.py -h')
    print('    python image_mover.py -d <directory> [-v] [-n]')
    print('')
    print('Options:')
    print('--------')
    print('    -h, --help                  Show this help message and exit.')
    print('')
    print('    -d, --directory <directory> Move all images in the given directory and its sub-')
    print('                                directories to a folder structure based on their dates.')
    print('')
    print('    -v, --verbose               Print more information during the process.')
    print('')
    print('    -n, --dry-run               Do not actually move files. Only show what would be done.')
    print('')
    print('Notes:')
    print('------')
    print('The script expects that the filenames follow a specific date format, as generated by')
    print('the "image_dater.py" script. Images are moved into folders named "Pictures_<Year>", with')
    print('subfolders for each month, named "<Month>_<Year>".')
    print('')
    return

def run_script(script: str, args: list):
    """
    Helper function to run a Python script with the provided arguments.
    """
    cmd = [sys.executable, script] + args
    try:
        result = subprocess.run(cmd, check=True)
        if result.returncode != 0:
            print(f"Error running {script}: {result.returncode}")
    except subprocess.CalledProcessError as e:
        print(f"Failed to run {script}: {e}")
        sys.exit(1)

def main():
    parser = argparse.ArgumentParser(
        description = "Process images by renaming and moving them.",
        add_help    = False,
    )
    parser.add_argument('-h', '--help',      action='store_true')

    if args.help:
        show_help()
        print('\nQuit image processer tool\n')
        sys.exit(0)
    
    # Mirror the arguments of both scripts
    parser.add_argument('-d', '--directory', type=str, help="Directory to process")
    parser.add_argument('-f', '--file', type=str, help="File to inspect (used by image_dater.py)")
    parser.add_argument('-n', '--dry-run', action='store_true', help="Dry run mode (no changes made)")
    parser.add_argument('-v', '--verbose', action='store_true', help="Verbose mode")
    args = parser.parse_args()

    # Collect arguments to pass to both scripts
    script_args = []
    if args.directory:
        script_args += ['-d', args.directory]
    if args.file:
        script_args += ['-f', args.file]
    if args.dry_run:
        script_args.append('-n')
    if args.verbose:
        script_args.append('-v')

    # Run image_dater.py first
    print("Running image_dater.py...")
    run_script('image_dater.py', script_args)

    # Run image_mover.py second
    print("Running image_mover.py...")
    run_script('image_mover.py', script_args)

if __name__ == "__main__":
    main()
